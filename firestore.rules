rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function roomDoc(room) {
      return get(/databases/$(database)/documents/rooms/$(room));
    }
    function roomExists(room) {
      return exists(/databases/$(database)/documents/rooms/$(room));
    }
    function roomEnding(room) {
      return roomDoc(room).data.ending == true;
    }
    function isHypnotist(room, uid) {
      return roomExists(room) && roomDoc(room).data.hypnotistUid == uid;
    }
    function isParticipant(room, uid) {
      return exists(/databases/$(database)/documents/rooms/$(room)/participants/$(uid));
    }
    function roleOf(room, uid) {
      return get(/databases/$(database)/documents/rooms/$(room)/participants/$(uid)).data.role;
    }

    match /rooms/{room} {
      // Publicly readable room meta (can tighten later)
      allow read: if true;

      // Create a room: creator becomes hypnotist; defaults locked
      allow create: if request.auth != null
        && request.resource.data.hypnotistUid == request.auth.uid
        && request.resource.data.keys().hasOnly(['hypnotistUid','deckIndex','subjectsCanDraw','ending','createdAt'])
        && request.resource.data.subjectsCanDraw == false
        && (!('ending' in request.resource.data) || request.resource.data.ending == false)
        && request.resource.data.createdAt == request.time
        && request.resource.data.deckIndex is int;

      // Only hypnotist may flip switches while room open
      allow update: if request.auth != null
        && isHypnotist(room, request.auth.uid)
        && request.resource.data.keys().hasOnly(['hypnotistUid','deckIndex','subjectsCanDraw','ending','createdAt'])
        && request.resource.data.hypnotistUid == resource.data.hypnotistUid
        && request.resource.data.createdAt == resource.data.createdAt
        && (request.resource.data.ending is bool)
        && (request.resource.data.subjectsCanDraw is bool)
        && !roomEnding(room);

      // Hypnotist may delete
      allow delete: if request.auth != null && isHypnotist(room, request.auth.uid);

      match /participants/{uid} {
        // Only members and hypnotist can see roster
        allow read: if (request.auth != null) && (isParticipant(room, request.auth.uid) || isHypnotist(room, request.auth.uid));

        // Join as subject while room open
        allow create: if request.auth != null
          && request.auth.uid == uid
          && roomExists(room) && !roomEnding(room)
          && request.resource.data.keys().hasOnly(['role','displayName','joinedAt'])
          && request.resource.data.role == 'subject'
          && request.resource.data.joinedAt == request.time;

        // Self can change displayName; hypnotist can moderate role/muted/banned
        allow update: if request.auth != null && (
            (request.auth.uid == uid
              && request.resource.data.keys().hasOnly(['role','displayName','joinedAt'])
              && request.resource.data.role == resource.data.role
              && request.resource.data.joinedAt == resource.data.joinedAt
            ) ||
            (isHypnotist(room, request.auth.uid)
              && request.resource.data.keys().hasOnly(['role','displayName','joinedAt','muted','banned'])
            )
          );

        // Leave or kicked
        allow delete: if request.auth != null && (request.auth.uid == uid || isHypnotist(room, request.auth.uid));
      }

      match /messages/{msg} {
        allow read: if request.auth != null && (isParticipant(room, request.auth.uid) || isHypnotist(room, request.auth.uid));
        allow create: if request.auth != null && (isParticipant(room, request.auth.uid) || isHypnotist(room, request.auth.uid))
          && !roomEnding(room);
        allow update: if false;
        allow delete: if request.auth != null && (isHypnotist(room, request.auth.uid) || (resource.data.uid == request.auth.uid));
      }

      match /draws/{id} {
        allow read: if request.auth != null && (isParticipant(room, request.auth.uid) || isHypnotist(room, request.auth.uid));
        allow create: if request.auth != null && !roomEnding(room) && (
          isHypnotist(room, request.auth.uid) ||
          (roleOf(room, request.auth.uid) == 'subject' && roomDoc(room).data.subjectsCanDraw == true)
        );
        allow update: if false;
        allow delete: if request.auth != null && isHypnotist(room, request.auth.uid);
      }
    }
  }
}
